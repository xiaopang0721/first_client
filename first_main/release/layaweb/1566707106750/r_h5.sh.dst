#!/bin/bash

__root=`pwd`
if [ -n "$1" ];then
	var_args="$1"
fi

if [ -n "$2" ];then
	fource="$2"
	echo "$fource"
fi

VPath='version_h5.txt'
VPathMin='version_h5_min.txt'
version_min_bin_name='version_h5_min.bin'
version_bin_name='version_h5.bin'
# 同步目录
RsyncPath='rsync_folder/first_res'
# 需要同步的目录或文件
excludes=`cat excludes.txt`
# 本地的目录或文件
local_asset=`cat local_asset_h5.txt`

remote=`git remote | sed -n "1p"`
symbolic=`git symbolic-ref --short -q HEAD`
git reset --hard
echo "更新最新内容"
git pull $remote $symbolic
if [ $? -ne '0' ]; then
	echo "更新出错请检查"
	exit 1
fi

if [ -n "$var_args" ];then
	BaseVersion=`echo $var_args | awk 'BEGIN{FS=OFS=""}{for(i=1;i<=NF;i++){if($i=="."){printf ""}else{printf $i}}print ""}'`
	BaseVersionN=`echo $(($BaseVersion))`
	BaseVersion=`echo $BaseVersionN | awk 'BEGIN{FS=OFS=""}{for(i=1;i<=NF;i++){if(i%1==0&&i<4&&i!=NF){printf $i"."}else{printf $i}}print ""}'`
else
	BaseVersion=`sed -n 2p $VPath | awk 'BEGIN{FS=OFS=""}{for(i=1;i<=NF;i++){if($i=="."){printf ""}else{printf $i}}print ""}'`
	BaseVersionN=`echo $(($BaseVersion+1))`
	BaseVersion=`echo $BaseVersionN | awk 'BEGIN{FS=OFS=""}{for(i=1;i<=NF;i++){if(i%1==0&&i<4&&i!=NF){printf $i"."}else{printf $i}}print ""}'`
fi

# BaseVersion=`sed -n 2p $VPath_YunWei | awk 'BEGIN{FS=OFS=""}{for(i=1;i<=NF;i++){if($i=="."){printf ""}else{printf $i}}print ""}'`
# BaseVersionN=`echo $(($BaseVersion+1))`
# BaseVersion=`echo $BaseVersionN | awk 'BEGIN{FS=OFS=""}{for(i=1;i<=NF;i++){if(i%1==0&&i!=NF){printf $i"."}else{printf $i}}print ""}'`
timer=`date +%s`
echo $timer > $VPath
echo $BaseVersion >> $VPath
echo $BaseVersionN >> $VPath

# 清空同步目录(不清空 老版本兼容问题)
if [ "$fource" == 'true' ];then
	rm -rf $RsyncPath
fi


# 去首尾空白
trim()
{
    trimmed=$1
    trimmed=${trimmed%% }
    trimmed=${trimmed## }
    echo $trimmed
}

# 遍历一下,从基础版本到现在最新版本的所有变化文件并取最新版本
for temp in `git ls-files` ;do
	__temp=${temp%%/*}
	islocal=0
	for item in $local_asset ;do
		item=$(trim $item)
		if [[ $temp == $item || $temp == "${item}/"* ]]; then
			islocal=1
			break
		fi
	done
	if [ $islocal == 1 ]; then
		#echo "本地素材：$temp"
		continue
	fi
	for item in ${excludes[@]};do 
		item=`echo ${item%\r}`
		if [[ $item == $temp || $item == $__temp ]]; then
			if [ -f $temp ] ; then
				v=`git log --oneline --no-merges $temp | head -1 | awk '{print $1}'`
				echo "${temp} ${v}"
				echo "${temp} ${v}" >> $VPath
				dir="${RsyncPath}/$(dirname $temp)"
				mkdir -p $dir
				cp -rf $temp "${dir}/${v}_$(basename $temp)"
			fi
		fi
	done
done

mkdir -p $RsyncPath
#headV=`git rev-parse --short HEAD`
cp -rf $VPath "${RsyncPath}/${VPath}_`date +%Y%m%d%H%M%S`"

# 打包为bin文件
python pack.py $__root $version_bin_name $VPath

echo `sed -n '1p' $VPath` > $VPathMin
echo `sed -n '2p' $VPath` >> $VPathMin
echo `sed -n '3p' $VPath` >> $VPathMin

python pack.py $__root $version_min_bin_name $VPathMin


# git add .

# git commit -am '维护h5远程素材'
# git pull $remote $symbolic
# git push $remote $symbolic
# if [ $? -ne '0' ]; then
# 	echo "推送异常请检查"
# 	exit 2
# fi
